<?php
/**
 * PlACIDO-SHOP FRAMEWORK - BACK OFFICE
 * Copyright © Raphaël Castello , 2022
 * Organisation: SNS - Web et Informatique
 * Web site: https://sns.pm
 * @link: contact@sns.pm
 *
 * Script name:	static_pages.php
 *
 * static_pages::get_static_pages(); // ADD TO SITEMAP ?
 * static_pages::Sort_Pages
 * static_pages::admin_record_static_page();
 * static_pages::verify_inputs( $page_title, $page_url );
 * static_pages::admin_suppr_static_page();
 * static_pages::admin_modify_static_page();
 *
 */

class static_pages {



	/**
	 * static_pages::get_static_pages();
	 *
	 * @return {array}  array of static pages for front static pages
	 */
	public static function get_static_pages(){


			$ARR_pdo = false;
			$sql = 'SELECT * FROM static_pages ORDER BY page_id ASC';
			$response = 'all';
      $last_id = false;
			$GET_STATIC_PAGES = db::server($ARR_pdo, $sql, $response, $last_id);


			// empty
			if( empty($GET_STATIC_PAGES) ){

					return array();
			}

			// sort alphabetically STATIC_PAGES array
			usort($GET_STATIC_PAGES, 'static_pages::Sort_Pages' );

			return $GET_STATIC_PAGES;

	}
	/**
	 * static_pages::get_static_pages();
	 */



	/**
	 * static_pages::Sort_Pages
	 *
	 * @param  {key} $a
	 * @param  {key} $b
	 * @return {array}    sort alphabetically STATIC_PAGES array
	 */
	public static function Sort_Pages( $a, $b ){

			return ( strtolower($a['page_title']) > strtolower($b['page_title']) )
			? 1 : -1;
	}
	/**
	 * static_pages::Sort_Pages
	 */



	/**
	 * static_pages::admin_record_static_page();
	 *
	 * @return {array}  new array of static pages
	 */
	public static function admin_record_static_page(){


			// VERIFY USER
			$token = trim(htmlspecialchars( $_POST['token'] ));
			// verify token
			program::verify_token($token);

			// datas recived
			$page_title = (string) trim(htmlspecialchars($_POST['page_title']));
			// not apply htmlspecialchars here
			$page_url = (string) trim($_POST['page_url']);

			// verify inputs recived - re-used
			$VERIF = static_pages::verify_inputs( $page_title, $page_url );
			// renew vars with well formated and verified str
			$page_title = $VERIF['page_title'];
			$page_url = $VERIF['page_url'];


			// 1 - create file in folder /templates/STATIC_PAGES
			$new_page = ROOT.'/templates/STATIC_PAGES/'.$page_url.'.html';

			// ! CHECK FOR DUPLICATES FILES
			if( file_exists($new_page) ){

					$tab = array('error' => tr::$TR['error_static_page_already_exist'] );
					echo json_encode($tab, JSON_FORCE_OBJECT);
					exit;
			}

			// make exemples in comments
			$models = '
 - Generated by Placido Shop

Page URL : https://'.HOST.'/'.$page_url.'.html

i. For access at this page from another place in the website :

	- Insert a button :

	ex. : Insert a button on sidebar

	<button
	onclick="$.open_static_page(event, \'{{static_pages.'.$page_url.'.url}}\');"
  class="bar-item pointer"
  role="button"
  aria-label="{{static_pages.'.$page_url.'.page_title}}">
    <i class="fa-fw fa-hand-point-right far"></i>&nbsp; Translate this</button>

	- Insert a link :

	<a onclick="$.open_static_page(event, \'{{static_pages.'.$page_url.'.url}}\');"
  href="{{static_pages.'.$page_url.'.url}}.html"
  title="{{static_pages.'.$page_url.'.page_title}}"
  class="underline">Link to my page</a>

';

// pass a structure + welcome code
$welcome = '
<!-- global container : Use always id="page" -->
<div class="card round" id="page">
	<!-- code what you want here ex. : -->
	<h2 class="bold">Hello from : '.$page_title.'</h2>
</div>
<!-- END global container -->
';

			// use DOMDocument for insert models in commentary
			$dom = new DOMDocument('1.0');
			// create comm infos.
			$comm = $dom->createComment($models);
			// create a structure with a welcome text
			// use fragment
			$element = $dom->createDocumentFragment();
			// append code as xml -> work for html
			$element->appendXML($welcome);
			// append comment infos
			$dom->appendChild($comm);
			// append fragment of code
			$dom->appendChild($element);

			// verify well recorded new page in folder
			if( $dom->saveHTMLFile($new_page) === false ){

					$tab = array('error' => tr::$TR['error_create_static_page'] );
					echo json_encode($tab, JSON_FORCE_OBJECT);
					exit;
			}


			// 2- insert new page on DB
			$ARR_pdo = array(
				'page_title' => $page_title,
				'page_url' => $page_url,
			);

			$sql = 'INSERT INTO static_pages
			( page_title, page_url ) VALUES ( :page_title, :page_url )';
			$response = false;
      $last_id = true; // return last id for scroll view to new item
			$RECORD_STATIC_PAGE = db::server($ARR_pdo, $sql, $response, $last_id);

			// error
			if( boolval($RECORD_STATIC_PAGE) == false ){

					$tab = array('error' => tr::$TR['error_create_static_page'] );
          echo json_encode($tab, JSON_FORCE_OBJECT);
          exit;
			}

			// ADD TO SITEMAP
			tools::add_to_sitemap( $id=0, $page_url.'.html', 'static_page' );

			// success
			$tab = array(
						'success' => tr::$TR['success_create_static_page'],
						'static_pages' =>  static_pages::get_static_pages(),
						'page_id' => (int) $RECORD_STATIC_PAGE
			);

			echo json_encode($tab, JSON_NUMERIC_CHECK);
			exit;

	}
	/**
	 * static_pages::admin_record_static_page();
	 */



	/**
	 * static_pages::verify_inputs( $page_title, $page_url );
	 *
	 * @return {array}
	 * array(
	 * 	'page_title' => $page_title,
	 * 	'page_url' => $page_url,
	 * );
	 */
	public static function verify_inputs( $page_title, $page_url ){


			// page_title
			// empty // global_empty_fields
			if( empty($page_title) ){

					$tab = array('error' => tr::$TR['empty_title'] );
          echo json_encode($tab, JSON_FORCE_OBJECT);
          exit;
			}

			// too long page_title
			if( iconv_strlen( $page_title ) > 500 ){

					$tab = array('error' => tr::$TR['too_long_page_title'] );
          echo json_encode($tab, JSON_FORCE_OBJECT);
          exit;
			}

			// page_url
			// empty
			if( empty($page_url) ){

					$tab = array('error' => tr::$TR['global_empty_fields'] );
          echo json_encode($tab, JSON_FORCE_OBJECT);
          exit;
			}

			// too long page_url
			if( iconv_strlen( $page_url ) > 500 ){

					$tab = array('error' => tr::$TR['too_long_page_url'] );
          echo json_encode($tab, JSON_FORCE_OBJECT);
          exit;
			}

			// parse page_url on true URL - use filter for verify ?
			$page_url = tools::format_in_url( $page_url );
			// echo $page_url;

			// empty after transform in URL
			if( empty($page_url) ){

					$tab = array('error' => tr::$TR['error_create_static_page'] );
					echo json_encode($tab, JSON_FORCE_OBJECT);
					exit;
			}

			return array(
						 	'page_title' => $page_title,
						 	'page_url' => $page_url,
						 );

	}
	/**
	 * static_pages::verify_inputs( $page_title, $page_url );
	 */



	/**
	 * static_pages::admin_suppr_static_page();
	 * delete a page and return new array of static pages
	 * @return {json}
	 */
	public static function admin_suppr_static_page(){


			// VERIFY USER
			$token = trim(htmlspecialchars( $_POST['token'] ));
			// verify token
			program::verify_token($token);

			$page_id = (int) trim(htmlspecialchars($_POST['page_id']));

			// too long id
			if( $page_id > 1000000 ){

					$tab = array('error' => tr::$TR['bad_context'] );
					echo json_encode($tab, JSON_FORCE_OBJECT);
					exit;
			}

			// NOT DELETE PAGE ID = 1
			// ! => Contact page do not be deleted by application
			if( $page_id == 1 ){

					$tab = array('error' => tr::$TR['page_contact_not_suppr'] );
					echo json_encode($tab, JSON_FORCE_OBJECT);
					exit;
			}


			// GET PAGE
			// get url of the page
			$ARR_pdo = array(
				'page_id' => $page_id,
			);
			$sql = 'SELECT * FROM static_pages WHERE page_id=:page_id';
			$response = 'one';
      $last_id = false;
			$GET_PAGE = db::server($ARR_pdo, $sql, $response, $last_id);

			// EMPTY RESULT OR ERROR
			if( empty($GET_PAGE) || boolval($GET_PAGE) == false ){

					$tab = array('error' => tr::$TR['page_not_found'] );
					echo json_encode($tab, JSON_FORCE_OBJECT);
					exit;
			}

			// PATH TO FILE
			$page = ROOT.'/templates/STATIC_PAGES/'.$GET_PAGE['page_url'].'.html';

			// unlink if file exist -> OR pass next step
			if( file_exists($page) ){

					unlink($page);
			}

			// DELETE refs page IN DATA BASE
			$ARR_pdo = array(
				'page_id' => $page_id,
				'page_url' => $GET_PAGE['page_url']
			);

			// DELETE PAGE
			$sql = 'DELETE FROM static_pages
			WHERE page_id=:page_id AND page_url=:page_url';
			$response = false;
      $last_id = false;
			$DELETE_PAGE = db::server($ARR_pdo, $sql, $response, $last_id);

			// error delete page
			if( boolval($DELETE_PAGE) == false ){

					$tab = array('error' => tr::$TR['unable_to_suppr_file_in_db'] );
					echo json_encode($tab, JSON_FORCE_OBJECT);
					exit;
			}

			// SUPPR TO SITEMAP - pass 'page_url.html' instead of id as parameter
			tools::suppr_to_sitemap( $GET_PAGE['page_url'].'.html' );

			// all ok - return new list of statics pages
			// success
			$tab = array(
						'success' => tr::$TR['success_suppr_static_page'],
						'static_pages' =>  static_pages::get_static_pages()
			);

			echo json_encode($tab, JSON_NUMERIC_CHECK);
			exit;


	}
	/**
	 * static_pages::admin_suppr_static_page();
	 */



	/**
	 * static_pages::admin_modify_static_page();
	 * delete a page and return new array of static pages
	 * @return {json}
	 */
	public static function admin_modify_static_page(){


			// VERIFY USER
			$token = trim(htmlspecialchars( $_POST['token'] ));
			// verify token
			program::verify_token($token);

			// datas recived from server :

			$page_id = (int) trim(htmlspecialchars($_POST['page_id']));

			// too long id
			if( $page_id > 1000000 ){

					$tab = array('error' => tr::$TR['bad_context'] );
					echo json_encode($tab, JSON_FORCE_OBJECT);
					exit;
			}

			// page title
			$page_title = (string) trim(htmlspecialchars($_POST['page_title']));

			// page url
			$page_url = (string) trim(htmlspecialchars($_POST['page_url']));

			// verify inputs - return array
			$VERIF = static_pages::verify_inputs( $page_title, $page_url );
			$page_title = $VERIF['page_title'];
			$page_url = $VERIF['page_url'];

			// get old datas of page
			$ARR_pdo = array(
				'page_id' => $page_id,
			);
			$sql = 'SELECT * FROM static_pages WHERE page_id=:page_id';
			$response = 'one';
      $last_id = false;
			$GET_PAGE = db::server($ARR_pdo, $sql, $response, $last_id);

			// EMPTY RESULT OR ERROR
			if( empty($GET_PAGE) || boolval($GET_PAGE) == false ){

					$tab = array('error' => tr::$TR['page_not_found'] );
					echo json_encode($tab, JSON_FORCE_OBJECT);
					exit;
			}

			// PATHS
			$old_page = ROOT.'/templates/STATIC_PAGES/'.$GET_PAGE['page_url'].'.html';
			$new_page = ROOT.'/templates/STATIC_PAGES/'.$page_url.'.html';

			// test old file exist
			if( !file_exists($old_page) ){

					$tab = array('error' => tr::$TR['page_not_found'] );
					echo json_encode($tab, JSON_FORCE_OBJECT);
					exit;
			}

			// rename old file
			$Rename = rename( $old_page, $new_page );

			// error rename
			if( $Rename == false ){

					$tab = array('error' => tr::$TR['unable_to_rename_file'] );
					echo json_encode($tab, JSON_FORCE_OBJECT);
					exit;
			}


			// UPDATE in data base
			$ARR_pdo = array(
				'page_id' => $page_id,
				'page_title' => $page_title,
				'page_url' => $page_url
			);

			$sql = 'UPDATE static_pages
			SET page_title=:page_title, page_url=:page_url
			WHERE page_id=:page_id';
			$response = false;
      $last_id = false;

			$UPDATE_PAGE = db::server($ARR_pdo, $sql, $response, $last_id);

			// error update
			if( boolval($UPDATE_PAGE) == false ){

					$tab = array('error' => tr::$TR['unable_to_rename_file_in_db'] );
					echo json_encode($tab, JSON_FORCE_OBJECT);
					exit;
			}


			// SUPPR old page TO SITEMAP - pass 'page_url.html' instead of id as parameter
			tools::suppr_to_sitemap( $GET_PAGE['page_url'].'.html' );

			// ADD new page TO SITEMAP
			tools::add_to_sitemap( $id=0, $page_url.'.html', 'static_page' );


			// all ok - return new list of statics pages
			// success
			$tab = array(
						'success' => tr::$TR['success_rename_file'],
						'static_pages' =>  static_pages::get_static_pages()
			);

			echo json_encode($tab, JSON_NUMERIC_CHECK);
			exit;

	}
	/**
	 * static_pages::admin_modify_static_page();
	 */




}
// END class static_pages::


?>
